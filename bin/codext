#!/usr/bin/env bash
set -euo pipefail

readonly extensions_file="$HOME/dotfiles/src/.vscode/extensions.txt"

dump_extensions() {
  code --list-extensions | sort > "$extensions_file"
  local count=$(wc -l < "$extensions_file")
  echo "Dumped $count extensions to $extensions_file"
}

prune_extensions() {
  local installed_extensions=$(code --list-extensions 2>/dev/null || echo "")
  local expected_extensions=$(grep -v '^#' "$extensions_file" | grep -v '^$' || echo "")
  local to_remove=()

  while IFS= read -r installed_ext; do
    if ! echo "$expected_extensions" | grep -q "^${installed_ext}$" 2>/dev/null; then
      to_remove+=("$installed_ext")
    fi
  done <<< "$installed_extensions"

  if [[ ${#to_remove[@]} -eq 0 ]]; then
    echo 'No extensions to remove'
    return 0
  fi

  echo "The following extensions are not in $extensions_file:"
  for ext in "${to_remove[@]}"; do
    echo "  - $ext"
  done
  echo -n 'Remove these extensions? (y/n): '
  read -r response < /dev/tty

  if [[ ! "$response" =~ ^[Yy]([Ee][Ss])?$ ]]; then
    echo 'Cancelled'
    return 0
  fi

  local removed=0
  for ext in "${to_remove[@]}"; do
    echo "Uninstalling $ext..."
    if code --uninstall-extension "$ext" > /dev/null 2>&1; then
      removed=$((removed + 1))
    fi
  done

  echo "Removed $removed extensions"
}

install_extensions() {
  local installed_extensions
  installed_extensions=$(code --list-extensions 2>/dev/null || echo "")

  local total=0
  local installed=0
  local skipped=0

  while IFS= read -r extension; do
    [[ -z "$extension" || "$extension" =~ ^# ]] && continue
    total=$((total + 1))
  done < "$extensions_file"

  local current=0

  while IFS= read -r extension; do
    [[ -z "$extension" || "$extension" =~ ^# ]] && continue

    current=$((current + 1))
    echo "[$current/$total] $extension"

    if echo "$installed_extensions" | grep -q "^$extension$" 2>/dev/null; then
      echo 'Already installed'
      skipped=$((skipped + 1))
    else
      if code --install-extension "$extension" --force > /dev/null 2>&1; then
        echo 'Installed'
        installed=$((installed + 1))
      else
        echo 'Failed'
      fi
    fi
  done < "$extensions_file"

  echo "Installed: $installed, Skipped: $skipped"
}

main() {
  if ! command -v code > /dev/null 2>&1; then
    echo "Error: 'code' command not found"
    exit 1
  fi

  case "${1:-}" in
    --dump)
      dump_extensions
      ;;
    --prune | '')
      if [[ ! -f "$extensions_file" ]]; then
        echo "Error: $extensions_file not found"
        [[ "${1:-}" == '--prune' ]] || echo 'Run with --dump to create it'
        exit 1
      fi

      if [[ "${1:-}" == '--prune' ]]; then
        prune_extensions
      else
        install_extensions
      fi
      ;;
    *)
      echo "Error: Unknown option: $1"
      exit 1
      ;;
  esac
}

main "$@"
